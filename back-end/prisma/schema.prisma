generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Normal_User
  Owner
  Customer
  Staff
}

model User{
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String   @unique
  phoneNumber String   @unique
  password    String
  role        UserRole @default(Normal_User)
  
  isVerified  Boolean  @default(false) 
  address     Address?
  restaurants Restaurant[]
  isActive    Boolean  @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Address{
  id          Int      @id @default(autoincrement())
  street      String
  city        String
  state       String
  country     String
  pinCode     String
  landmark    String?
  userId      Int?      @unique    
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}

model Restaurant {
  restaurantId          Int    @id @default(autoincrement())
  restaurantName        String
  restaurantLocation    String
  restaurantEmail       String
  restaurantPhoneNumber String
  restaurantDescription String
  restaurantAddress     String

  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  tables       Table[]
  reservations Reservation[]
  menu         Menu?
  orders       Order[]
  orderItems   OrderItem[]
  bills        Bill[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model Table {
  id            Int    @id @default(autoincrement())
  tableName     String @unique
  tableCapacity Int

  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [restaurantId], onDelete: Cascade)

  reservations Reservation[]

  tableType   String  @default("Regular")
  tableStatus String  @default("Available")
  tableImage  String?

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String
  email     String
  contact   String

  numberOfGuests  Int
  specialRequests String?

  reservationTime DateTime // Single column for date and time

  tableId Int? // Optional
  table   Table? @relation(fields: [tableId], references: [id], onDelete: Cascade)

  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [restaurantId], onDelete: Cascade)

  status String @default("Booked")

  orders Order[]
  bill   Bill?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Menu {
  id Int @id @default(autoincrement())

  restaurantId Int        @unique
  restaurant   Restaurant @relation(fields: [restaurantId], references: [restaurantId], onDelete: Cascade)
  menuItems    MenuItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MenuItem {
  id              Int     @id @default(autoincrement())
  itemName        String
  itemDescription String?
  itemPrice       Float
  itemImage       String?
  itemCategory    String  @default("General")
  itemType        String?
  itemStatus      String  @default("Available")
  itemRating      Float?  @default(0.0)

  menuId Int
  menu   Menu @relation(fields: [menuId], references: [id], onDelete: Cascade)

  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum OrderStatus {
  Open
  Finalized
  Cancelled
  Paid
}

model Order {
  id          Int         @id @default(autoincrement())
  status      OrderStatus @default(Open)
  totalAmount Float
  placedAt    DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  tableId Int?
  table   Table? @relation(fields: [tableId], references: [id], onDelete: SetNull)

  reservationId Int?
  reservation   Reservation? @relation(fields: [reservationId], references: [id], onDelete: SetNull)

  restaurantId Int
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [restaurantId], onDelete: Cascade)
  orderItems   OrderItem[]
  bill         Bill?
}

model OrderItem {
  id           Int        @id @default(autoincrement())
  quantity     Int
  price        Float // Price at the time of order
  notes        String?
  menuItemId   Int
  menuItem     MenuItem   @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  orderId      Int
  order        Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [restaurantId], onDelete: Cascade)
}

enum BillStatus {
  Unpaid
  Paid
  Cancelled
}

model Bill {
  id          Int        @id @default(autoincrement())
  totalAmount Float
  status      BillStatus @default(Unpaid)

  // Scalar snapshot fields
  restaurantName        String
  restaurantEmail       String
  restaurantPhoneNumber String
  restaurantAddress     String
  customerName          String
  customerPhoneNumber   String

  // Foreign keys for queryability (optional, set null on delete)
  restaurantId  Int?
  restaurant    Restaurant?  @relation(fields: [restaurantId], references: [restaurantId], onDelete: SetNull)
  reservationId Int?         @unique
  reservation   Reservation? @relation(fields: [reservationId], references: [id], onDelete: SetNull)
  orderId       Int?         @unique
  order         Order?       @relation(fields: [orderId], references: [id], onDelete: SetNull)

  billItems BillItem[]
  payments  Payment?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BillItem {
  id         Int    @id @default(autoincrement())
  itemName   String
  menuItemId Int
  price      Float
  quantity   Int
  totalPrice Float

  billId Int
  bill   Bill @relation(fields: [billId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentStatus {
  Pending
  Completed
  Failed
}

enum PaymentMethod {
  Cash
  Card
  UPI
}

model Payment {
  id            Int            @id @default(autoincrement())
  amount        Float
  status        PaymentStatus  @default(Pending)
  method        PaymentMethod
  paymentDate   DateTime       @default(now())
  
  billId Int @unique
  bill   Bill? @relation(fields: [billId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

