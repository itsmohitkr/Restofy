generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RestaurantOwner {
  ownerId          Int           @id @default(autoincrement())
  ownerName        String
  ownerEmail       String        @unique
  ownerPhoneNumber String        @unique
  ownerPassword    String
  role             String        @default("Admin")
  restaurants      Restaurant[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Restaurant {
  restaurantId          Int              @id @default(autoincrement())
  restaurantName        String
  restaurantLocation    String
  restaurantEmail       String
  restaurantPhoneNumber String
  restaurantDescription String
  restaurantAddress     String

  ownerId               Int?
  restaurantOwner       RestaurantOwner?  @relation(fields: [ownerId], references: [ownerId])



  tables                Table[]
  reservations          Reservation[]
  menu                 Menu?
  staff                RestaurantStaff[]
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
}

model Table {
  id            Int         @id @default(autoincrement())
  tableName     String
  tableCapacity Int

  restaurantId  Int
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [restaurantId])

  reservations  Reservation[]

  isAvailable   Boolean?     @default(true)
  
  tableType     String      @default("Regular")
  tableStatus   String      @default("Available")
  tableImage    String?

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Reservation {
  id                Int         @id @default(autoincrement())
  firstName         String
  lastName          String
  email             String
  contact           String
  
  numberOfGuests    Int
  specialRequests   String?

  reservationTime   DateTime    // Single column for date and time

  tableId           Int?        // Optional
  table             Table?      @relation(fields: [tableId], references: [id])

  restaurantId      Int
  restaurant        Restaurant  @relation(fields: [restaurantId], references: [restaurantId])

  status            String     @default("Booked")

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Menu{
  id                Int         @id @default(autoincrement())
  
  restaurantId      Int         @unique
  restaurant        Restaurant  @relation(fields: [restaurantId], references: [restaurantId])
  menuItems         MenuItem[]

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model MenuItem {
  id                Int         @id @default(autoincrement())
  itemName          String
  itemDescription   String?
  itemPrice         Float
  itemImage         String?

  menuId            Int
  menu              Menu        @relation(fields: [menuId], references: [id])

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model RestaurantStaff {
  id                Int         @id @default(autoincrement())
  staffName         String
  staffEmail        String      @unique
  staffPhoneNumber  String      @unique
  staffPassword     String
  staffRole         String      @default("Staff") // Manager, Waiter, Chef, etc.
  isActive          Boolean     @default(true)
  
  
  restaurantId      Int
  restaurant        Restaurant  @relation(fields: [restaurantId], references: [restaurantId])
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

